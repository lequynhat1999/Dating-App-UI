# Project Guidelines

## Documentation Requirements

-   Update relevant documentation in /docs when modifying features
-   Keep README.md in sync with new capabilities
-   Maintain changelog entries in CHANGELOG.md

## Architecture Decision Records

Create ADRs in /docs/adr for:

-   Major dependency changes
-   Architectural pattern changes
-   New integration patterns
-   Database schema changes
    Follow template in /docs/adr/template.md

## Code Style & Patterns

-   Generate API clients using OpenAPI Generator
-   Use TypeScript axios template
-   Place generated code in /src/generated
-   Prefer composition over inheritance
-   Use repository pattern for data access
-   Follow error handling pattern in /src/utils/errors.ts
-   **Language:** TypeScript
-   **Framework:** Angular
-   **Component-Based Architecture:** Angular components are used extensively.
-   **Modules:** Angular modules are used for feature organization.
-   **Services:** Angular services are used for business logic and data handling.
-   **Naming Conventions:**
    -   **Components:** PascalCase class names, kebab-case selectors.
    -   **Services:** PascalCase class names (e.g., `AccountService`).
    -   **Variables/Properties:** camelCase (e.g., `isHideNavbar`).
    -   **Inputs/Outputs:** camelCase with `@Input()` and `@Output()` decorators.
-   **File Structure:** Feature-based modules.
-   **TypeScript Specific:**
    -   Imports, Decorators, Classes, Types, Observables, Strict Mode are used.
-   **Angular Specific:**
    -   Templates (`.html`), Styles (`.scss`), Component Logic (`.ts`) are separated.
    -   Data Binding, Angular Router, Material Design are used.
-   **Code Style:**
    -   Indentation: 2 spaces.
    -   Quotes: Single quotes for strings.
    -   Semicolons: Used.
    -   Line Length: ~120 characters.
    -   Brace Style: Allman style.

## Testing Standards

-   Unit tests required for business logic
-   Integration tests for API endpoints
-   E2E tests for critical user flows
